@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@using SpiritTime.Frontend.Partials.Toasts
@using SpiritTime.Frontend.Partials.ToastModal
@using ElectronNET.API
@using SpiritTime.Frontend.Infrastructure.ElectronConfig

<BaseOverlay/>

<BlazoredToasts Position="@ToastPosition.BottomRight"
                Timeout="10"
                SuccessClass="success-toast-override"
                SuccessIconClass="oi oi-circle-check"
                ErrorIconClass="oi oi-circle-x"
                WarningIconClass="oi oi-warning"/>


<div class="main">
    <div class="top-row">
        
        <div class="small-size menu-placeholder"></div>
        <div class="">
            <a class="custom-navbar-brand" href="">
                <img src="/img/icon_120x120.png" asp-append-version="true" alt="SpiritTime Logo" class="logo-small"/>
                <p class="custom-header">SpiritTime</p>
            </a>

        </div>
        <div class="login-nav-menu">
            @if (HybridSupport.IsElectronActive)
            {
                <button class="custom-small-button mr-3" @onclick="@(() => ReloadUi())">
                    <i class="fas fa-sync-alt"></i>
                </button>
            }
            <LoginMenu/>
        </div>
    </div>

    <div class="d-flex">
        <AuthorizeView>
            <Authorized>
                <div class="sidebar">
                    <NavMenu/>
                </div>
                <div class="content">
                    @Body
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="content full-width">
                    @Body
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
<div class="footer">
    <div class="version">@Version</div>
</div>

@code{

    public string Version { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (HybridSupport.IsElectronActive)
        {
            var version = await Electron.App.GetVersionAsync();
            Version = "Version: " + version;
            Electron.AutoUpdater.OnError              += (message) => Electron.Dialog.ShowErrorBox("Error", message);
            Electron.AutoUpdater.OnCheckingForUpdate  += async () =>
            {
                await Electron.Dialog.ShowMessageBoxAsync("Checking for Updates...");
                Version = "Checking for Updates...";
                await InvokeAsync(StateHasChanged);
            };
            Electron.AutoUpdater.OnUpdateAvailable    += async (info) =>
            {
                await Electron.Dialog.ShowMessageBoxAsync("Update available" + info.Version);
                Version = "Update available" + info.Version;
                await InvokeAsync(StateHasChanged);
            };
            Electron.AutoUpdater.OnDownloadProgress += async (info) =>
            {
                var separator = " / ";
                var indexOfPercent = info.Percent.IndexOf('.');
                var message1 = "Download speed: " + info.BytesPerSecond + separator;
                var message2 = "Downloaded " + info.Percent.Substring(indexOfPercent, info.Percent.Length-1) + "%" + separator;
                var message3 = $"({info.Transferred:0.00}/{info.Total:0.00})" + separator;
                var information = message1 + message2 + message3;
                Version = information;
                await InvokeAsync(StateHasChanged);
            };
            Electron.AutoUpdater.OnUpdateDownloaded += async (info) =>
            {
                await Electron.Dialog.ShowMessageBoxAsync("Update complete!" + info.Version);
                Version = "Current version: " + version + "; Available version after restart: " + info.Version;
                await InvokeAsync(StateHasChanged);
            };
            await ElectronUpdater.Check();
        }
    
    }

    protected void ReloadUi()
    {
        var mainWindow = Electron.WindowManager.BrowserWindows.FirstOrDefault();
        mainWindow?.Reload();
    }

}